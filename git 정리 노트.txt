아무것도 없는 원격 저장소에서는 git push가 가능하다.
git config --global user.name "wkdnffla3"
git config --global user.email "wkdnffla3@naver.com"

git config --global alias.co checkout
이것은 checkout을 co로 생략해도 사용할수 있게 설정해준다.

git config --global core.quotepath off
한글 표시해주는것.

작업을 하고자 하는 폴더로 들어가서 git inint을 해준다.
cd 나 mkdir 을 이용.

git status 를 이용 폴더의 작업트리와 인덱스 상태를 확인.

git add 파일명 혹은 git add . 이건 전체 추가.

add 했으면 git commit -m " commit ments"를 이용해서 커밋해준다.

git log 저장소의 변경이력.

gitk 변경이력을 gui에서 확인가능.

원격 저장소를 복제하려면 클론 clone이라는 조작을 수핸한다.
복제란 원격 저장소의 내용을 통째로 다운로드하는 것을 말한다.
복제한 저장소를 다른 pc에서 로컬 저장소로 활용가능

변경 이력도 함께 로컬 저장소에 복제되어 오므로 원래 연격 저장소와 똑같이
이력을 참조하고 커밋을 진행할 수 있다.

원격 저장소에서 로컬 저장소로 업데이트 하려면 pull을 실행한다
원격저장소에서 최신 변경 이력을 다운로드하여 내 로컬 저장소에 그내용을 적용한다.

원격 저장소에 로컬 저장소의 이력을 push해보자
원격 저장소의 주소는 이름으로 기록이 가능하다. 기록을 해두면 push 할때마다 긴원격 저장소의 주소를 입력하지 않아도 된다.

우선 origin이라는 이름으로 원격 저장소를 등록하고 push 한다.
원격저장소를 추가하려면 remote 명령어를 사용한다.
name은 등록명 url은 원격저장소의 url을 지정한다.

git remote add name url
ex> git remote add origin https://github.com/wkdnffla3/Practice_C.git

url 변경하기
git remote set-url origin url

기존 원격 저장소의 이름 origin
새로운 원격 저장소 url : url

현재 url주소 확인하기.
git remote -v


콘솔일 경우 push나 pull은 실행 시에 원격 저장소명을 생략하면 origin이라는 이름의 원격 저장소를 사용합니다.
그때문에 원격 저장소에는 origin 이라는 이름을 붙이는 것이 일반적.

<repository>는 push 경로의 주소 <refspec>은 push 할 브랜치르 지정한다.
브랜치에대한 내용은 발전편에서 많이 설명할것이다.

실행 옵션에서 한번 -u를 지정하면 이후에는 그 브랜치명 지정을 생략할 수있다.
비어있는 원격 저장소에 최초로 push했을 때는 원격 저장소명과 브랜치명을 생략ㄱ능.
git push -u origin master



저장소를 복제할라면 clone 명령어를 이용한다.
repository는 원격 저장소의 URL directory는 복제대상의 폴더명을 지칭
git clone repository directory

ex> git clone https://github.com/wkdnffla3/Practice_C.git testing
이렇게하면 현제 폴더 위치에서 testing이라는 폴더가 만들어진뒤에 그안에 Practice_C 내용이 복제된다.

복제한 저장소에서 다시 푸시를 하려면 cd로 복제한 directory로 접속 해야된다.







원격 저장소에서 pull 해오기 

이전 페이지에서 tutorial2로부터 원격 저장소로 보낸 push 한 내용을 내pc의 tutorial 폴더로 가져와 pull 해본다.
pull을 수행하려면 pull 명령어를 사용한다. 만약 저장소명이 생략되면 origin 의 이름으로 등록 되어 있는 저장소 밑에 pull을 수행한다.


git pull repository refspec

ex>git pull origin master


내 로컬 저장소의 내용과 원격 저장소의 내용이 다른경우에 pull을 해줄경우 원격 저장소의 내용이 update된다.


내가 끌어온 저장소가 최신 버전이 아닌경우 즉 내가 pull을 실행한 후 다른 사람이 push를 하여 원격 저장소를 업데이트 해버린 경우에는 내 push 요청이 거부되어 버린다.
이런경우 merge 라는 작업을 진행하여 다른 사람의 업데이트 이력을 내 저장소에도 갱신해야된다. 만약 병합하지 않은 채로 이력을 덮어쓰게 되면 다른 사람이 push한 업데이트 내역이 사라져 버리기 때문
병학 기능을 이용하면 Git이 현재 브랜치에 알아서 변경 사항을 통합해준다. 

하지만 Git에서 변경한 부분을 자동으로 통합해줄수 없을때도 있다.
바로 원격 저장소와 로컬 저장소 양쪽에서 파일의 동일한 부분을 변경한 경우이다. 이경우 두변경 내용중 어느 쪽을 저장할 것인지 자동으로 판단 할 수 없기 때문에 충돌이 발생한다.

그래서 pull을해서 충돌난 부분을 확인한다음에 수정을하고 push하면 된다.



브랜치는 여러 개발자들이 동시에 다양한 작업을 할 수 있게 만들어 주는 기능이 바로 브랜치이다.
각자 독립적인 작업 영역 (저장소) 안에서 마음대로 소스 코드를 변경할 수 있다.
이렇게 분리된 작업 영역에서 변경된 내용은 나중에 원래의 버전과 비교해서 하나의 새로운 버전으로 만들어 낼 수 있다.

브랜치는 하나의 흐름에서 갈라져나와 다시 뭉치는것(merge)이다.


다른 사람의 작업에 영향을 주거나 받지 않도록 먼저 메인 브랜치에서 자신의 작업 전용 브랜치를 만든다. 
작업이 끝난 사람은 메인 브랜치에 자신의 브랜치의 변경사항을 적용한다. 
이렇게 작업을 할 경우 작업단위 즉 브랜치로 그 작업의 기록을 중간중간 남기게 되므로 문제가 발생할때 원인이되는것을 쉽게 발견 가능하다.


저장소를 처음 만들면 git은 바로 master라는 이름의 브랜치를 만들어 둡니다 이 새로운 저장소에
새로운 파일을 추가 한다거나 추가한 파일의 내용을 변경하여 그 내용을 저장(commit)하는 것은 모두 'master'라는 브랜치를 통해 처리할수 있는 일이 됩니다.

master가 아닌 또 다른 새로운 브랜치를 만들어서 이제부터 이브랜치를 사용할거야 라고
선언 checkout 하지 않는 이상 이때의 모든 작업은 master 브랜치에서 이루어 진다.



git에서는 작업에 따라 자유롭게 브랜치를 만들 수 있다. 그러나 이것을 효과적으로 관리하려면 먼저 함께 작업할 팀원들과 어떠한
방식으로 브랜치를 맍들지 어느 시점에 통합할 것인지 등등 규칙은 정하기 나름이다.

우리는 통합 브랜치와 토픽 브랜치를 만들수 있다.

통합 브랜치란 언제든지 배포할 수 이}ㅆ는 버전을 만들 수 있어야 하는 브랜치입니다. 그렇기 때문에 늘
안정적인 상태를 유지하는 것이 중요허ㅏㅂ니다 여기서 안정적인 상태란
현재 작업중인 소스코드가 모바일에서 동작하는 어플리케이션을 개발하기 위한 것이라면 그 어플리케이션의 모든 기능이 정상적으로 동작하는 상태를 의미합니다.

만약 이 어플리 케이션에 어떤 문제가 발견되어 그 문제 (버그)를 수정한다던지 새로운 기능을 추가해야 한다던지 해야할 때, 바로
토픽 브랜치를 만들수 있습니다 처음에는 보통 통합 브랜치에서 토픽 브랜치를 만들어냅니다

->결과 통합브랜치(intergration Branch)이놈은 main 토픽 브랜치(topic Branch)이놈은 곁다리

토픽 브랜치
토픽 브랜치란 기능 추가나 버그 수정과 같은 단위 작업을 위한 브랜치입니다.
여러개의 작업을 동시에 진행할 때는 그 수만큼 토픽 브랜치를 생성 가능하다.

토픽 브랜치는 보통 통합 브랜치로부터 만들어내며 토픽 브랜치에서 특정 작업이 완료되면 다시 통합 브랜치에 병합하는 방식으로
진행된다
이런 토픽 브랜치는 피처 브랜치(Feature Branch) 라고 부르기도 한다

git 에서는 항상 작업할 브랜치를 미리 선택해야된다
처음에는 master 브랜치가 선택되어 있다.
선택된 브랜치가 아닌 다른 브랜치에서 작업 하고 싶을때에는 checkout 명령어를 실행하여 원하는 브랜치로 전환이 가능하다.

checkout을 실행하면 우선 브랜치 안에 있는 마지막 커밋 내용이 작업 트리에 펼쳐집니다.
브랜치가 전환 되었으므로 이 후에 실행한 커밋은 전환한 브랜치에 추가된다.




































































